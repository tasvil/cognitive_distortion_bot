from pydantic import BaseModel, Field
from abc import ABC

# TODO: добавить поле questions_to_doubt_catastrophizing_if_present
# В котором должно сгенерироваться несколько вариантов вопросов, которые
# могли бы заставить пользователя усомниться в истинности этого искажения


class DistortionSchema(BaseModel, ABC):
    # name: str = Field(..., description="Название когнитивного искажения")
    present: bool = Field(..., description="Наличие когнитивного искажения")
    reasoning: str = Field(
        ..., description="Причина, по которой мысль содержит данное искажение"
    )


class CatastrophizingSchema(DistortionSchema):
    # name: str = "Катастрофизация"
    present: bool = Field(
        ...,
        description="Катастрофизация — склонность преувеличивать возможные негативные последствия, воспринимая ситуацию как катастрофическую без реальных оснований.",
    )
    reasoning: str = Field(
        ...,
        description="Причина, по которой мысль содержит катастрофизацию. Например, излишнее преувеличение возможных негативных последствий ситуации.",
    )


class OvergeneralizationSchema(DistortionSchema):
    # name: str = "Обобщение"
    present: bool = Field(
        ...,
        description="Обобщение — вывод общего правила на основе одного случая. Применение единичного опыта к широкому кругу событий или ситуаций.",
    )
    reasoning: str = Field(
        ...,
        description="Причина, по которой мысль содержит обобщение. Например, вывод, сделанный на основе одного случая, который распространяется на будущее.",
    )


class MindReadingSchema(DistortionSchema):
    # name: str = "Чтение мыслей"
    present: bool = Field(
        ...,
        description="Чтение мыслей — убеждение, что вы знаете, что другие люди думают, чаще всего предполагая негативное отношение к себе, без доказательств.",
    )
    reasoning: str = Field(
        ...,
        description="Причина, по которой мысль содержит чтение мыслей. Например, предположение о мыслях или намерениях другого человека без фактических оснований.",
    )


class BlackAndWhiteThinkingSchema(DistortionSchema):
    # name: str = "Черно-белое мышление"
    present: bool = Field(
        ...,
        description="Черно-белое мышление — склонность воспринимать ситуации в крайних категориях, без учета промежуточных вариантов.",
    )
    reasoning: str = Field(
        ...,
        description="Причина, по которой мысль содержит черно-белое мышление. Например, неспособность увидеть промежуточные результаты или рассмотреть варианты между крайностями.",
    )


class EmotionalReasoningSchema(DistortionSchema):
    # name: str = "Эмоциональное обоснование"
    present: bool = Field(
        ...,
        description="Эмоциональное обоснование — восприятие собственных эмоций как объективных доказательств реальности.",
    )
    reasoning: str = Field(
        ...,
        description="Причина, по которой мысль содержит эмоциональное обоснование. Например, ощущение, что эмоции подтверждают объективную реальность, без других доказательств.",
    )


class PersonalizationSchema(DistortionSchema):
    # name: str = "Персонализация"
    present: bool = Field(
        ...,
        description="Персонализация — тенденция принимать на себя ответственность за внешние события, даже если они не зависят от вас.",
    )
    reasoning: str = Field(
        ...,
        description="Причина, по которой мысль содержит персонализацию. Например, принятие вины за события, на которые человек не мог повлиять.",
    )


class ShouldStatementsSchema(DistortionSchema):
    # name: str = "Долженствования"
    present: bool = Field(
        ...,
        description="Долженствования — формулирование строгих обязательств по отношению к себе или другим, что может привести к чувству вины или неудовлетворенности, если ожидания не выполнены.",
    )
    reasoning: str = Field(
        ...,
        description="Причина, по которой мысль содержит долженствование. Например, использование слов 'должен' или 'обязан', что создает излишние требования к себе или окружающим.",
    )


class SelectedDistortion(BaseModel):
    name: str = Field(
        ...,
        description=(
            "Название когнитивного искажения, выбранного моделью в качестве значимого для анализа. "
            "Название должно быть кратким и понятным, например, 'Катастрофизация', 'Чтение мыслей', "
            "или 'Обобщение'. Название отражает конкретный тип когнитивного искажения, который модель "
            "считает важным для работы над изменением мысли пользователя."
        ),
    )
    reason: str = Field(
        ...,
        description=(
            "Развернутое объяснение того, почему это конкретное искажение выбрано для анализа и коррекции. "
            "В данном поле модель должна объяснить, каким образом это искажение проявляется в мысли пользователя, "
            "какие аспекты этой мысли свидетельствуют о наличии данного искажения, а также почему именно это искажение "
            "важно проработать в первую очередь. Например, для искажения 'Катастрофизация' объяснение может включать "
            "упоминание о том, что пользователь склонен к преувеличению возможных негативных последствий, что усиливает "
            "его тревогу и мешает объективной оценке ситуации. Для 'Чтения мыслей' объяснение может включать указание "
            "на то, что пользователь делает предположения о мыслях или намерениях других людей без доказательств, что "
            "ведет к неверным выводам и усиливает чувство беспокойства. Обоснование должно быть достаточно ясным, чтобы "
            "человек мог понять, почему именно это искажение заслуживает внимания и как его работа над ним поможет "
            "изменить восприятие ситуации."
        ),
    )


class FocusDistortionResponse(BaseModel):
    selected_distortions: list[SelectedDistortion] = Field(
        ...,
        description=(
            "Список объектов, каждый из которых представляет одно из двух основных когнитивных искажений, "
            "выбранных моделью для фокусировки. Каждый объект в списке является экземпляром схемы SelectedDistortion "
            "и включает название искажения и развернутое объяснение его значимости. Список должен содержать не более "
            "двух элементов, так как основной задачей модели является выделение ключевых искажений, которые сильнее "
            "всего влияют на мысль пользователя. Фокусировка на одном или двух искажениях позволяет пользователю легче "
            "понять и начать работу с конкретными аспектами своей мысли, не перегружая анализ множеством когнитивных "
            "искажений. Модель должна выбрать только те искажения, которые играют самую значительную роль в текущем "
            "контексте мысли, а также разъяснить, каким образом их проработка может способствовать более объективному "
            "и рациональному взгляду на ситуацию."
        ),
    )


class MeaningfulnessSchema(BaseModel):
    meaningfulness_score: float = Field(
        ...,
        description=(
            "Числовая оценка пригодности текста для анализа в диапазоне от 0 до 1, где:\n"
            "- 0: Текст совершенно бессмысленный, не содержит никакой логики, структуры или "
            "похожести на осмысленное высказывание. Примеры: случайный набор слов, бессвязный текст.\n"
            "- 0.1-0.2: Текст является шуткой или вопросом о каких-то фактах и его нельзя назвать мыслью.\n"
            "- 0.3–0.4: Текст имеет минимальные элементы осмысленности, но все еще не является "
            "похожим на сформулированную мысль. Может быть неструктурированным или включать шумовые данные.\n"
            "- 0.5–0.7: Текст умеренно осмысленный, с элементами логики или связной структуры. "
            "Может быть мыслью, но требует доработки.\n"
            "- 0.8–1: Текст полностью осмысленный, структурированный, содержит ясную идею или утверждение. "
            "Подходит для дальнейшего анализа когнитивных искажений."
        ),
    )
    reasoning: str = Field(
        ...,
        description=(
            "Краткое объяснение, почему текст был оценен данным образом. Включает анализ структуры текста, "
            "наличие логики, последовательности и семантического содержания. Объяснение должно быть полезным "
            "для понимания пользователя, например:\n"
            "- 'Текст состоит из случайного набора слов, не образует связного высказывания.'\n"
            "- 'Текст содержит структурированные фразы, но имеет повторяющиеся элементы и неясные утверждения.'\n"
            "- 'Текст хорошо структурирован, представляет собой логически связную мысль.'"
        ),
    )

class RationalResponseSchema(BaseModel):
    rational_response: str = Field(
        ...,
        description="Сформулированный рациональный ответ на мысль пользователя."
    )
    additional_comments: str = Field(
        ...,
        description="Дополнительные комментарии или рекомендации, если они уместны."
    )